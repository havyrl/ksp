// Contract for setting up a network for a multi-moon (typically gas giant) planet.
//   Author: nightingale

CONTRACT_TYPE:NEEDS[RemoteTech]
{
    name = RT_GasGiantRelay

    title = RemoteTech: Create a network for @targetBody.
    description = There's so much science to be done in the @targetBody system!  We need to set up a communication network that can cover every moon in the system.
    synopsis = Build a communication network that provides coverage of all of @targetBody's moons with a link back to mission control.
    completedMessage = The network is up and transmitting, and our shake-out testing is complete!

    group = RemoteTech

    // Level 3 prestige
    prestige = Exceptional

    targetBody = @targetPlanet

    // Always offered by CommSat Group
    agent = Communication Satellite Group

    // Contract rewards
    rewardReputation = 2.0
    rewardFunds = @advanceFunds * 3.0
    advanceFunds = 25000.0 + @targetMoons.Count()

    weight = 2.0
    
    DATA
    {
        type = CelestialBody
        uniqueValue = true

        targetPlanet = AllBodies().Where(cb => cb.IsPlanet() && cb.Children().Count() >= 3 && cb.RemoteTechCoverage() < 0.7).Random()
    }

    DATA
    {
        type = List<CelestialBody>

        targetMoons = @targetPlanet.Children()
    }

    PARAMETER
    {
        name = MoonCoverage
        type = CelestialBodyCoverage

        targetBody = @/targetMoons.ElementAt(0)

        coverage = 0.95
    }

    PARAMETER
    {
        name = MoonCoverage
        type = CelestialBodyCoverage

        targetBody = @/targetMoons.ElementAt(1)

        coverage = 0.95
    }

    PARAMETER
    {
        name = MoonCoverage
        type = CelestialBodyCoverage

        targetBody = @/targetMoons.ElementAt(2)

        coverage = 0.95
    }

    PARAMETER
    {
        name = MoonCoverage
        type = CelestialBodyCoverage

        targetBody = @/targetMoons.ElementAt(3)

        coverage = 0.95

        REQUIREMENT
        {
            type = Expression
            expression = @/targetMoons.Count() > 3
        }
    }

    PARAMETER
    {
        name = MoonCoverage
        type = CelestialBodyCoverage

        targetBody = @/targetMoons.ElementAt(4)

        coverage = 0.95

        REQUIREMENT
        {
            type = Expression
            expression = @/targetMoons.Count() > 4
        }
    }

    PARAMETER
    {
        name = MoonCoverage
        type = CelestialBodyCoverage

        targetBody = @/targetMoons.ElementAt(5)

        coverage = 0.95

        REQUIREMENT
        {
            type = Expression
            expression = @/targetMoons.Count() > 5
        }
    }

    PARAMETER
    {
        name = MoonCoverage
        type = CelestialBodyCoverage

        targetBody = @/targetMoons.ElementAt(6)

        coverage = 0.95

        REQUIREMENT
        {
            type = Expression
            expression = @/targetMoons.Count() > 6
        }
    }

    PARAMETER
    {
        name = MoonCoverage
        type = CelestialBodyCoverage

        targetBody = @/targetMoons.ElementAt(7)

        coverage = 0.95

        REQUIREMENT
        {
            type = Expression
            expression = @/targetMoons.Count() > 7
        }
    }

    PARAMETER
    {
        name = Duration
        type = Duration

        duration = 7d

        preWaitText = Testing time after network up
        waitingText = Performing shake-out testing
        completionText = Shake-out testing completed
    }

    REQUIREMENT
    {
        name = CelestialBodyCoverage
        type = CelestialBodyCoverage

        targetBody = HomeWorld()

        minCoverage = 0.7
        maxCoverage = 1.0
    }

    REQUIREMENT
    {
        name = AnyGigaDish
        type = Any

        REQUIREMENT
        {
            name = PartUnlocked1
            type = PartUnlocked

            part = RTGigaDish1
        }

        REQUIREMENT
        {
            name = PartUnlocked2
            type = PartUnlocked

            part = RTGigaDish2
        }
    }

    REQUIREMENT
    {
        name = PartModuleTypeUnlocked
        type = PartModuleTypeUnlocked

        partModuleType = Antenna
        partModuleType = Power
    }
}
